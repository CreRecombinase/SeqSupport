// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/SeqSupport.h"
#include <RcppEigen.h>
#include <Rcpp.h>
#include <string>
#include <set>

using namespace Rcpp;

// blosc
int blosc();
static SEXP _SeqSupport_blosc_try() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    rcpp_result_gen = Rcpp::wrap(blosc());
    return rcpp_result_gen;
END_RCPP_RETURN_ERROR
}
RcppExport SEXP _SeqSupport_blosc() {
    SEXP rcpp_result_gen;
    {
        Rcpp::RNGScope rcpp_rngScope_gen;
        rcpp_result_gen = PROTECT(_SeqSupport_blosc_try());
    }
    Rboolean rcpp_isInterrupt_gen = Rf_inherits(rcpp_result_gen, "interrupted-error");
    if (rcpp_isInterrupt_gen) {
        UNPROTECT(1);
        Rf_onintr();
    }
    Rboolean rcpp_isError_gen = Rf_inherits(rcpp_result_gen, "try-error");
    if (rcpp_isError_gen) {
        SEXP rcpp_msgSEXP_gen = Rf_asChar(rcpp_result_gen);
        UNPROTECT(1);
        Rf_error(CHAR(rcpp_msgSEXP_gen));
    }
    UNPROTECT(1);
    return rcpp_result_gen;
}
// haplo_2_geno
Eigen::MatrixXd haplo_2_geno(const Eigen::MatrixXd haplo, bool snps_in_rows);
RcppExport SEXP _SeqSupport_haplo_2_geno(SEXP haploSEXP, SEXP snps_in_rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXd >::type haplo(haploSEXP);
    Rcpp::traits::input_parameter< bool >::type snps_in_rows(snps_in_rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(haplo_2_geno(haplo, snps_in_rows));
    return rcpp_result_gen;
END_RCPP
}
// haplo_2_geno_i
Eigen::MatrixXi haplo_2_geno_i(const Eigen::MatrixXi haplo, bool snps_in_rows);
RcppExport SEXP _SeqSupport_haplo_2_geno_i(SEXP haploSEXP, SEXP snps_in_rowsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::MatrixXi >::type haplo(haploSEXP);
    Rcpp::traits::input_parameter< bool >::type snps_in_rows(snps_in_rowsSEXP);
    rcpp_result_gen = Rcpp::wrap(haplo_2_geno_i(haplo, snps_in_rows));
    return rcpp_result_gen;
END_RCPP
}
// match_sorted_exp
Rcpp::IntegerVector match_sorted_exp(const Rcpp::IntegerVector& query, const Rcpp::IntegerVector& target);
RcppExport SEXP _SeqSupport_match_sorted_exp(SEXP querySEXP, SEXP targetSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type query(querySEXP);
    Rcpp::traits::input_parameter< const Rcpp::IntegerVector& >::type target(targetSEXP);
    rcpp_result_gen = Rcpp::wrap(match_sorted_exp(query, target));
    return rcpp_result_gen;
END_RCPP
}
// map_eQTL_h5
void map_eQTL_h5(const Rcpp::StringVector SNP_path, const Rcpp::StringVector EXP_path, const Rcpp::StringVector out_path, int SNP_chunksize, int EXP_chunksize);
RcppExport SEXP _SeqSupport_map_eQTL_h5(SEXP SNP_pathSEXP, SEXP EXP_pathSEXP, SEXP out_pathSEXP, SEXP SNP_chunksizeSEXP, SEXP EXP_chunksizeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::StringVector >::type SNP_path(SNP_pathSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector >::type EXP_path(EXP_pathSEXP);
    Rcpp::traits::input_parameter< const Rcpp::StringVector >::type out_path(out_pathSEXP);
    Rcpp::traits::input_parameter< int >::type SNP_chunksize(SNP_chunksizeSEXP);
    Rcpp::traits::input_parameter< int >::type EXP_chunksize(EXP_chunksizeSEXP);
    map_eQTL_h5(SNP_path, EXP_path, out_path, SNP_chunksize, EXP_chunksize);
    return R_NilValue;
END_RCPP
}
// crossprod_h5
void crossprod_h5(Rcpp::StringVector filenames, Rcpp::StringVector groupnames, Rcpp::StringVector datanames);
RcppExport SEXP _SeqSupport_crossprod_h5(SEXP filenamesSEXP, SEXP groupnamesSEXP, SEXP datanamesSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type filenames(filenamesSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type groupnames(groupnamesSEXP);
    Rcpp::traits::input_parameter< Rcpp::StringVector >::type datanames(datanamesSEXP);
    crossprod_h5(filenames, groupnames, datanames);
    return R_NilValue;
END_RCPP
}
// crossprod_quh_h5
void crossprod_quh_h5(const Rcpp::DataFrame q_dff, const Rcpp::DataFrame uh_dff, const Rcpp::DataFrame quh_dff);
RcppExport SEXP _SeqSupport_crossprod_quh_h5(SEXP q_dffSEXP, SEXP uh_dffSEXP, SEXP quh_dffSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type q_dff(q_dffSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type uh_dff(uh_dffSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type quh_dff(quh_dffSEXP);
    crossprod_quh_h5(q_dff, uh_dff, quh_dff);
    return R_NilValue;
END_RCPP
}
// map_eQTL_chunk_h5
void map_eQTL_chunk_h5(const Rcpp::DataFrame snp_dff, const Rcpp::DataFrame exp_dff, const Rcpp::DataFrame uhat_dff, const Rcpp::DataFrame se_dff);
RcppExport SEXP _SeqSupport_map_eQTL_chunk_h5(SEXP snp_dffSEXP, SEXP exp_dffSEXP, SEXP uhat_dffSEXP, SEXP se_dffSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type snp_dff(snp_dffSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type exp_dff(exp_dffSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type uhat_dff(uhat_dffSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type se_dff(se_dffSEXP);
    map_eQTL_chunk_h5(snp_dff, exp_dff, uhat_dff, se_dff);
    return R_NilValue;
END_RCPP
}
// read_ld_chunk_h5
Rcpp::NumericMatrix read_ld_chunk_h5(const std::string filename, const int ld_chunk);
RcppExport SEXP _SeqSupport_read_ld_chunk_h5(SEXP filenameSEXP, SEXP ld_chunkSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const std::string >::type filename(filenameSEXP);
    Rcpp::traits::input_parameter< const int >::type ld_chunk(ld_chunkSEXP);
    rcpp_result_gen = Rcpp::wrap(read_ld_chunk_h5(filename, ld_chunk));
    return rcpp_result_gen;
END_RCPP
}

// validate (ensure exported C++ functions exist before calling them)
static int _SeqSupport_RcppExport_validate(const char* sig) { 
    static std::set<std::string> signatures;
    if (signatures.empty()) {
        signatures.insert("int(*blosc)()");
    }
    return signatures.find(sig) != signatures.end();
}

// registerCCallable (register entry points for exported C++ functions)
RcppExport SEXP _SeqSupport_RcppExport_registerCCallable() { 
    R_RegisterCCallable("SeqSupport", "_SeqSupport_blosc", (DL_FUNC)_SeqSupport_blosc_try);
    R_RegisterCCallable("SeqSupport", "_SeqSupport_RcppExport_validate", (DL_FUNC)_SeqSupport_RcppExport_validate);
    return R_NilValue;
}

static const R_CallMethodDef CallEntries[] = {
    {"_SeqSupport_blosc", (DL_FUNC) &_SeqSupport_blosc, 0},
    {"_SeqSupport_haplo_2_geno", (DL_FUNC) &_SeqSupport_haplo_2_geno, 2},
    {"_SeqSupport_haplo_2_geno_i", (DL_FUNC) &_SeqSupport_haplo_2_geno_i, 2},
    {"_SeqSupport_match_sorted_exp", (DL_FUNC) &_SeqSupport_match_sorted_exp, 2},
    {"_SeqSupport_map_eQTL_h5", (DL_FUNC) &_SeqSupport_map_eQTL_h5, 5},
    {"_SeqSupport_crossprod_h5", (DL_FUNC) &_SeqSupport_crossprod_h5, 3},
    {"_SeqSupport_crossprod_quh_h5", (DL_FUNC) &_SeqSupport_crossprod_quh_h5, 3},
    {"_SeqSupport_map_eQTL_chunk_h5", (DL_FUNC) &_SeqSupport_map_eQTL_chunk_h5, 4},
    {"_SeqSupport_read_ld_chunk_h5", (DL_FUNC) &_SeqSupport_read_ld_chunk_h5, 2},
    {"_SeqSupport_RcppExport_registerCCallable", (DL_FUNC) &_SeqSupport_RcppExport_registerCCallable, 0},
    {NULL, NULL, 0}
};

RcppExport void R_init_SeqSupport(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
