// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/SeqSupport.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// blosc
int blosc();
RcppExport SEXP _SeqSupport_blosc() {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    rcpp_result_gen = Rcpp::wrap(blosc());
    return rcpp_result_gen;
END_RCPP
}
// evd_rnorm_i
Eigen::MatrixXd evd_rnorm_i(const Eigen::Map<Eigen::MatrixXd> Q, const Eigen::Map<Eigen::VectorXd> s, const Eigen::Map<Eigen::MatrixXd> vm);
RcppExport SEXP _SeqSupport_evd_rnorm_i(SEXP QSEXP, SEXP sSEXP, SEXP vmSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Q(QSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::VectorXd> >::type s(sSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type vm(vmSEXP);
    rcpp_result_gen = Rcpp::wrap(evd_rnorm_i(Q, s, vm));
    return rcpp_result_gen;
END_RCPP
}
// crossprod_quh_h5
void crossprod_quh_h5(const Rcpp::DataFrame q_dff, const Rcpp::DataFrame uh_dff, const Rcpp::DataFrame quh_dff, const bool doTranspose);
RcppExport SEXP _SeqSupport_crossprod_quh_h5(SEXP q_dffSEXP, SEXP uh_dffSEXP, SEXP quh_dffSEXP, SEXP doTransposeSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type q_dff(q_dffSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type uh_dff(uh_dffSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type quh_dff(quh_dffSEXP);
    Rcpp::traits::input_parameter< const bool >::type doTranspose(doTransposeSEXP);
    crossprod_quh_h5(q_dff, uh_dff, quh_dff, doTranspose);
    return R_NilValue;
END_RCPP
}
// sim_U_exp
Eigen::MatrixXd sim_U_exp(const int n, Eigen::VectorXd tsigu);
RcppExport SEXP _SeqSupport_sim_U_exp(SEXP nSEXP, SEXP tsiguSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const int >::type n(nSEXP);
    Rcpp::traits::input_parameter< Eigen::VectorXd >::type tsigu(tsiguSEXP);
    rcpp_result_gen = Rcpp::wrap(sim_U_exp(n, tsigu));
    return rcpp_result_gen;
END_RCPP
}
// simulate_y_h5
Eigen::MatrixXd simulate_y_h5(const Rcpp::DataFrame in_dff, const Rcpp::DataFrame out_dff, const int p, const int N, const int g, Eigen::ArrayXd& tsigu);
RcppExport SEXP _SeqSupport_simulate_y_h5(SEXP in_dffSEXP, SEXP out_dffSEXP, SEXP pSEXP, SEXP NSEXP, SEXP gSEXP, SEXP tsiguSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type in_dff(in_dffSEXP);
    Rcpp::traits::input_parameter< const Rcpp::DataFrame >::type out_dff(out_dffSEXP);
    Rcpp::traits::input_parameter< const int >::type p(pSEXP);
    Rcpp::traits::input_parameter< const int >::type N(NSEXP);
    Rcpp::traits::input_parameter< const int >::type g(gSEXP);
    Rcpp::traits::input_parameter< Eigen::ArrayXd& >::type tsigu(tsiguSEXP);
    rcpp_result_gen = Rcpp::wrap(simulate_y_h5(in_dff, out_dff, p, N, g, tsigu));
    return rcpp_result_gen;
END_RCPP
}
// map_eQTL_chunk_h5
void map_eQTL_chunk_h5(const Rcpp::List snp_dff, const Rcpp::List exp_dff, const Rcpp::List uhat_dff, const Rcpp::List se_dff, const bool EXP_first, const bool SNP_first);
RcppExport SEXP _SeqSupport_map_eQTL_chunk_h5(SEXP snp_dffSEXP, SEXP exp_dffSEXP, SEXP uhat_dffSEXP, SEXP se_dffSEXP, SEXP EXP_firstSEXP, SEXP SNP_firstSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const Rcpp::List >::type snp_dff(snp_dffSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type exp_dff(exp_dffSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type uhat_dff(uhat_dffSEXP);
    Rcpp::traits::input_parameter< const Rcpp::List >::type se_dff(se_dffSEXP);
    Rcpp::traits::input_parameter< const bool >::type EXP_first(EXP_firstSEXP);
    Rcpp::traits::input_parameter< const bool >::type SNP_first(SNP_firstSEXP);
    map_eQTL_chunk_h5(snp_dff, exp_dff, uhat_dff, se_dff, EXP_first, SNP_first);
    return R_NilValue;
END_RCPP
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_SeqSupport_blosc", (DL_FUNC) &_SeqSupport_blosc, 0},
    {"_SeqSupport_evd_rnorm_i", (DL_FUNC) &_SeqSupport_evd_rnorm_i, 3},
    {"_SeqSupport_crossprod_quh_h5", (DL_FUNC) &_SeqSupport_crossprod_quh_h5, 4},
    {"_SeqSupport_sim_U_exp", (DL_FUNC) &_SeqSupport_sim_U_exp, 2},
    {"_SeqSupport_simulate_y_h5", (DL_FUNC) &_SeqSupport_simulate_y_h5, 6},
    {"_SeqSupport_map_eQTL_chunk_h5", (DL_FUNC) &_SeqSupport_map_eQTL_chunk_h5, 6},
    {"run_testthat_tests",            (DL_FUNC) &run_testthat_tests,            0},
    {NULL, NULL, 0}
};

RcppExport void R_init_SeqSupport(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
